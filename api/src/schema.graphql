type State {
  id: ID!
  name: String

  bridges: [Bridge] @cypher(statement: "MATCH (this)<-[:OF_STATE]-(:County)<-[:OF_COUNTY]-(:Place)<-[:OF_PLACE]-(bridge:Bridge) RETURN bridge")

  numCounties: Int @cypher(statement: "MATCH (this)<-[:OF_STATE]-(c:County) RETURN count(DISTINCT c)")
  numPlaces: Int @cypher(statement: "MATCH (this)<-[:OF_STATE]-(:County)<-[:OF_COUNTY]-(p:Place) RETURN count(DISTINCT p)")
  numBridges: Int @cypher(statement: "MATCH (this)<-[:OF_STATE]-(:County)<-[:OF_COUNTY]-(:Place)<-[:OF_PLACE]-(b:Bridge) RETURN count(DISTINCT b)")

  chartHeatMapStateOwner(owner: [String]): Int @cypher(statement: """
    MATCH (this)<-[*]-(bridge:Bridge)-[:OWNED_BY]->(owner:Owner)
    WHERE owner.description in $owner
    RETURN count(bridge)
    """
  )

  county: [County] @relation(name: "OF_STATE", direction: "IN")
}

type County {
  id: ID!
  name: String

  state: State @relation(name: "OF_STATE", direction: "OUT")
  place: [Place] @relation(name: "OF_COUNTY", direction: "IN")
}

type Place {
  id: ID!
  name: String

  county: County @relation(name: "OF_COUNTY", direction: "OUT")
  bridge: [Bridge] @relation(name: "OF_PLACE", direction: "IN")
}

type Bridge {
  id: ID!
  name: String
  latitude_decimal: Float
  longitude_decimal: Float
  yearbuilt: Int

  place: Place @relation(name: "OF_PLACE", direction: "OUT")
  buildYear: BuildYear @relation(name: "BUILT_IN", direction: "OUT")
  maintenanceResp: MaintenanceResp @relation(name: "MAINTAINED_BY", direction: "OUT")
  owner: Owner @relation(name: "OWNED_BY", direction: "OUT")

}

type BuildYear {
  id: ID!
  year: Int

  bridge: [Bridge] @relation(name: "BUILT_IN", direction: "IN")
}

type MaintenanceResp {
  id: ID!
  description: String

  bridge: [Bridge] @relation(name: "MAINTAINED_BY", direction: "IN")
}

type Owner {
  id: ID!
  description: String

  bridge: [Bridge] @relation(name: "OWNED_BY", direction: "IN")
}

type Query {
    
  bridge(state: String, owner: Int): [Bridge] @cypher(statement: """
    MATCH (b:Bridge)-[*]->(state:State)
    MATCH (b)-->(o:Owner)
    WHERE state.name = $state
    AND by.year = $year
    RETURN b
  """
    )

  # chartHeatMapStateOwner(state: [String], owner: [String]): State @cypher(statement: """
  #   MATCH (state:State)
  #   WHERE state.name in $state
  #   WITH state
  #   MATCH (state)<-[*]-(bridge:Bridge)-[:OWNED_BY]->(owner:Owner)
  #   WHERE owner.description in $owner
  #   // RETURN state.name, owner.description, count(bridge)
  #   // RETURN count(bridge)
  #   RETURN state
  #   """
  # )

  # usersBySubstring(substring: String, first: Int = 10, offset: Int = 0): [User] @cypher(statement: "MATCH (u:User) WHERE u.name CONTAINS $substring RETURN u")
 
}
